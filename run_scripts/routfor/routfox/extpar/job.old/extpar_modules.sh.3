#!/bin/ksh 
#PBS -q lc_big
#PBS -l pmem=64gb
#PBS -l pvmem=64gb
#PBS -l select=1:ncpus=8:ompthreads=8:mem=64gb:vmem=64gb
#PBS -l walltime=06:30:00
#PBS -l file=128gb
#PBS -j oe

module load unsupported
module unload intel/14.0.0.080
module load intel/15.0.3.187
module unload python
module load netcdf
module load cdo

module load python/3.5.2

ulimit -s unlimited
ulimit -c 0

#________________________________________________________________________________
error_count=0
run_command()
{
    set +e
    echo ">> Run ${1%% *} ..."    
    start=$(date +%s.%N)
    eval ./$1 >> ${logfile} 2>&1 
    rc=$?
    printf "   Return code: %i\n" $rc
    end=$(date +%s.%N)
    runtime=$(bc -l <<< "$end - $start")
    if (( rc > 0 ))
    then
        (( error_count++ ))
    fi 
    case $rc in
        0)
            echo "   SUCCESS ${1%% *}"            
            ;;
        127)
            echo "   ERROR ${1%% *}: command not found"
            ;;
        130)
            echo "   ERROR ${1%% *}: script terminated by Ctrl-C"
            ;;             
        *)
            echo "   ERROR ${1%% *}: fatal error - return code $rc"
            ;;
    esac
    echo "   execution time: $runtime s"
    set -e
}

eval $(routine_config)

TMP=${TMPDIR}/../
cd $TMP

scriptpath=$0
scriptname=${scriptpath##*/}
logfile=${scriptname%.*}_$(date +%Y%m%d%H%M%S).log

ICON_GRID=$(<igrid)
GRIDDIR=$(<igrid_dir)
WORKDIR=$(<iwork_dir)
PROGDIR=$(<progdir_lc)


#________________________________________________________________________________
# Names of executables

# Scripts
#binary_alb=extpar_alb_to_buffer.sh
#binary_ndvi=extpar_ndvi_to_buffer.sh
#binary_tclim=extpar_cru_to_buffer.sh
#
# GIT
#
#binary_alb=extpar_alb_to_buffer.exe
#binary_ndvi=extpar_ndvi_to_buffer.exe
#binary_emiss=extpar_emiss_to_buffer.exe
#binary_tclim=extpar_cru_to_buffer.exe
#binary_lu=extpar_landuse_to_buffer.exe
#binary_topo=extpar_topo_to_buffer.exe
#binary_aot=extpar_aot_to_buffer.exe
#binary_soil=extpar_soil_to_buffer.exe
#binary_flake=extpar_flake_to_buffer.exe
#binary_consistency_check=extpar_consistency_check.exe
#
# Workbench
#
#binary_alb=tstextpar_alb_to_buffer
#binary_ndvi=tstextpar_ndvi_to_buffer
#binary_emiss=tstextpar_emiss_to_buffer
#binary_tclim=tstextpar_cru_to_buffer
#binary_lu=tstextpar_landuse_to_buffer
#binary_topo=tstextpar_topo_to_buffer
#binary_aot=tstextpar_aot_to_buffer
#binary_soil=tstextpar_soil_to_buffer
#binary_flake=tstextpar_flake_to_buffer
#binary_consistency_check=tstextpar_consistency_check
#
#/usr/local/pkg/for0adm/abs
#
binary_alb=extpar_alb_to_buffer.new
binary_ndvi=extpar_ndvi_to_buffer.new
binary_emiss=extpar_emiss_to_buffer.new
binary_tclim=extpar_cru_to_buffer.new
binary_lu=extpar_landuse_to_buffer.new
binary_topo=extpar_topo_to_buffer.new
binary_aot=extpar_aot_to_buffer.new
binary_soil=extpar_soil_to_buffer.new
binary_flake=extpar_flake_to_buffer.new
binary_consistency_check=extpar_consistency_check.new

#________________________________________________________________________________

cp $PROGDIR/$binary_alb $WORKDIR/ 
cp $PROGDIR/$binary_ndvi $WORKDIR/
cp $PROGDIR/$binary_emiss $WORKDIR/
cp $PROGDIR/$binary_tclim $WORKDIR/
cp $PROGDIR/$binary_lu $WORKDIR/
cp $PROGDIR/$binary_topo $WORKDIR/
cp $PROGDIR/$binary_aot $WORKDIR/
cp $PROGDIR/$binary_soil $WORKDIR/
cp $PROGDIR/$binary_flake $WORKDIR/
cp $PROGDIR/$binary_consistency_check $WORKDIR/


export OMP_NUM_THREADS=8


cd $WORKDIR

# Assume GLOBE orography as default
cp INPUT_ORO_GLOBE INPUT_ORO
# Use ASTER orography for LAM Nest 
 if [[ ${ICON_GRID} == '0045_R19B08_LN02' ]]; then
     cp INPUT_ORO_ASTER INPUT_ORO
 fi

#FOR HIGH-RES ORO
#cp INPUT_ORO_ASTER INPUT_ORO

cp INPUT_TCLIM_COARSE INPUT_TCLIM
run_command ${binary_tclim}
cp INPUT_TCLIM_FINE INPUT_TCLIM

run_command ${binary_tclim}
run_command ${binary_emiss} 
run_command ${binary_topo} 
run_command ${binary_alb} 
run_command ${binary_ndvi} 
run_command ${binary_lu}
run_command ${binary_aot} 
run_command ${binary_soil}
run_command ${binary_flake}
run_command ${binary_consistency_check} 

