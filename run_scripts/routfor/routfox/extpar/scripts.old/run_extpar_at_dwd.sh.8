#!/bin/ksh

# ---  run_extpar_at_dwd.sh --- #

########################################################################
#                                                                      #
#  generate EXTernal PARameters for ICON                               #
#                                                                      #
#  call:         run_extpar_at_dwd.sh            \                     #
#                  -dir_grid=${dir_grid}         \                     #
#                  -info_grid=${info_grid}                             #
#                                                                      #
#                                                                      #
#  parameters:   -dir_grid   - directory of the ICON grid file         #
#                              default is  ROUTINE_DIR_IGLO_EXT        #
#  routine_config | fgrep -i ROUTINE_DIR_IGLO_EXT                      #       
#                -info_grid  - ICON grid base (e.g. 0026_R03B07_G)     #
#                                                                      #
#  example: run_extpar_at_dwd.sh -dir_grid=${filename}          \      #
#                                 -info_grid=${info_grid}              #
#                                                                      #
#  modified by:  J. Helmert from extpar_cosmo_routi.sh by Ch. Koziar   #
#                                                                      #
#  last change: 2019/06/13  by  J. Helmert                             #
#                                                                      #
########################################################################
#                                                                      #
#  Modifications:                                                      #
#  --------------                                                      #
#                                                                      #
#  2019/06/13  -  First version                                        #
#                                                                      #
########################################################################
error_count=0
run_command()
{
    set +e
    echo ">> Run ${1%% *} ..."    
    start=$(date +%s.%N)
    eval qsubw  $1 >> ${logfile} 2>&1 
    rc=$?
    printf "   Return code: %i\n" $rc
    end=$(date +%s.%N)
    runtime=$(bc -l <<< "$end - $start")
    if (( rc > 0 ))
    then
        (( error_count++ ))
    fi 
    case $rc in
        0)
            echo "   SUCCESS ${1%% *}" 
            echo "   LOGFILE is $TMP/$logfile" 
            ;;
        127)
            echo "   ERROR ${1%% *}: command not found"
            echo "   LOGFILE is $TMP/$logfile" 
            ;;
        *)
            echo "   ERROR ${1%% *}: fatal error - return code $rc"
            echo "   LOGFILE is $TMP/$logfile" 
            ;;
    esac
    echo "   execution time: $runtime s"
    set -e
}

scriptpath=$0
scriptname=${scriptpath##*/}
logfile=${scriptname%.*}_$(date +%Y%m%d%H%M%S).log


eval $(routine_config)

# ------------------------------------------------ #
# ---  help variables to print error masseges  --- #
# ------------------------------------------------ #
typeset          name=${0##*/} ; name=${name%.ne[uw]}
typeset          cn="${name}:"
typeset -L${#cn} bn=''
typeset -u       NAME=${name}

# ------------------------ #
# ---  usage function  --- #
# ------------------------ #
function usage { print "usage: ${name} -h" ; }

# ---------------------------------------------- #
# ---  parameter test - simple               --- #
# ---  (OPTIND: next parameter to evaluate)  --- #
# ---------------------------------------------- #
typeset    argstring="$@"

integer    errflag=0
typeset    errparm=''
typeset    ECHO=''

typeset    xopt=''

typeset    fflag=''
typeset    Dflag=''

if (( errflag == 1 )) ; then
  print "${cn} parameter error (${errparm})  -  usage: ${name} -h" >&2
  exit 201
fi

# ---------------------------------------------- #
# ---  parameter test - extended             --- #
# ---  (OPTIND: next parameter to evaluate)  --- #
# ---------------------------------------------- #
typeset    argstring="$@"
typeset    arg_array
set -A     arg_array -- "$@"

integer    errflag=0
typeset    errparm=''
typeset    ECHO=''

typeset    dir_grid=$ROUTINE_DIR_IGLO_EXT
typeset    info_grid=''

while getopts d:i:hp:u: option ; do
  case ${option} in
        d) # dir_grid
        optarg=${OPTARG}
        case ${optarg%%=*} in
          ir_grid) if [[ "${arg_array[$((${OPTIND}-2))]%%=*}" == "-${option}${optarg%%=*}" ]] ; then
                       if [[ ":${optarg%%=*}" == ":${optarg}" ]] ; then
                         dir_grid="${arg_array[$((${OPTIND}-1))]}"
                         OPTIND=$((${OPTIND} + 1))
                       else
                         dir_grid="${OPTARG#*=}"
                       fi
                     fi
                     ;;
           *)        errflag=1
                     ;;
        esac  
;;
     h) scr_info $0
        exit 0
        ;;
      i) # info_grid
        optarg=${OPTARG}
        case ${optarg%%=*} in
          nfo_grid) if [[ "${arg_array[$((${OPTIND}-2))]%%=*}" == "-${option}${optarg%%=*}" ]] ; then
                       if [[ ":${optarg%%=*}" == ":${optarg}" ]] ; then
                         info_grid="${arg_array[$((${OPTIND}-1))]}"
                         OPTIND=$((${OPTIND} + 1))
                       else
                         info_grid="${OPTARG#*=}"
                       fi
                     fi
                     ;;
           *)        errflag=1
                     ;;
        esac
        ;;
    \?) errflag=1
        ;;
  esac
  if (( errflag == 1 )) ; then
    eval errparm=\"\${$((${OPTIND}-1))}\"
    break
  fi
done
shift $((${OPTIND} - 1))

if [[ -z "${info_grid}" ]] ; then
  print "${cn} parameter error - usage: ${name} -h" >&2
  exit 201
fi




###################################################################################################


TODAY=$(date  +%Y%m%d)

ICON_GRID=${info_grid}
PROGDIR_LC=/usr/local/pkg/for0adm/abs/
GRIDDIR=${dir_grid}
EXTPAR_HOME=~routfor/routfox/extpar
TMP=${TMPDIR}/../
WORKDIR=$TMP/${ICON_GRID}_${TODAY}
print ">>>  Settings:"
print ">>>  dir_grid=${dir_grid}"
print ">>>  info_grid=${info_grid}"
print ">>>  progdir_lc=${PROGDIR_LC}"
print ">>>  extpar_home=${EXTPAR_HOME}"
print ">>>  tmp=${TMP}"
print ">>>  workdir=${WORKDIR}"

if (( errflag == 1 )) ; then
  print "${cn} parameter error (${errparm})  -  usage: ${name} -h" >&2
  exit 201
fi

cd $TMP

cat > igrid <<EOF
${ICON_GRID}
EOF
cat > igrid_dir <<EOF
${GRIDDIR}
EOF
cat > iwork_dir <<EOF
${WORKDIR}
EOF
cat > progdir_lc <<EOF
${PROGDIR_LC}
EOF
cat > progdir_xc <<EOF
${PROGDIR_XC}
EOF

###############################################################################################
echo "Step 1/5 for grid ${ICON_GRID} ... Prepare EXTPAR environment in $WORKDIR"
run_command ${EXTPAR_HOME}/job/extpar_prep.sh 
echo "Step 1/5 for grid ${ICON_GRID} ... Prepare EXTPAR environment in $WORKDIR ... finished"
###############################################################################################


###############################################################################################
echo "Step 2/5 for grid ${ICON_GRID} ... Start scripts for parameter from ERA-I "
echo "${ICON_GRID} ... Start scripts for parameter from ERA-I ... SST2ICON"
run_command ${EXTPAR_HOME}/job/dwd-monmean-sst2icon.sh
if [[ ! -s ${WORKDIR}/ei_an1986-2015_${ICON_GRID}_BUFFER.nc ]]; then
   echo "$0 error: ei_an1986-2015_${ICON_GRID}_BUFFER.nc is missing, something was going wrong before ..."
   exit
fi
echo "Step 2/5 for grid ${ICON_GRID} ... Scripts for parameter from ERA-I ... SST2ICON ... finished"
###############################################################################################



###############################################################################################
echo "Step 3/5 for grid ${ICON_GRID} ... Start scripts for parameter from ERA-I ... T2M2ICON"
run_command ${EXTPAR_HOME}/job/dwd-monmean-t2m2icon.sh
if [[ ! -s ${WORKDIR}/ei_2t_an1986-2015_${ICON_GRID}_BUFFER.nc ]]; then
   echo "$0 error: ei_2t_an1986-2015_${ICON_GRID}_BUFFER.nc is missing, something was going wrong before ..."
   exit
fi
echo "Step 3/5 for grid ${ICON_GRID} ... Scripts for parameter from ERA-I ... T2M2ICON ... finished"
###############################################################################################



###############################################################################################
echo "Step 4/5 for grid ${ICON_GRID} ... Start EXTPAR modules"
run_command ${EXTPAR_HOME}/job/extpar_modules.sh
echo "Step 4/5 for grid ${ICON_GRID} ... EXTPAR modules ... finished"
###############################################################################################


###############################################################################################
echo "Step 5/5 for grid ${ICON_GRID} ... Checking EXTPAR file and converting to GRIB2"
[[ -s ${WORKDIR}/external_parameter_icon_${ICON_GRID}_tiles.nc ]] || echo "EXTPAR file is external_parameter_icon_${ICON_GRID}_tiles.nc in ${WORKDIR}"
if [[ ! -s ${WORKDIR}/external_parameter_icon_${ICON_GRID}_tiles.nc ]]; then
   echo "$0 error: external_parameter_icon_${ICON_GRID}_tiles.nc is missing, something was going wrong before ..."
   exit
fi
run_command ${EXTPAR_HOME}/job/extpar2grib2.sh
[[ -s ${WORKDIR}/external_parameter_icon_${ICON_GRID}_tiles.g2 ]] || echo "EXTPAR file in GRIB2 is external_parameter_icon_${ICON_GRID}_tiles.g2 in ${WORKDIR}"
if [[ ! -s ${WORKDIR}/external_parameter_icon_${ICON_GRID}_tiles.nc ]]; then
   echo "$0 error: external_parameter_icon_${ICON_GRID}_tiles.g2 is missing, something was going wrong before ..."
   exit
fi
echo "Step 5/5 for grid ${ICON_GRID} ... Checking EXTPAR file and converting to GRIB2 ... finished"
###############################################################################################
