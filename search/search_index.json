{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#general-information","title":"General Information","text":"<p>EXTPAR (External Parameters for Numerical Weather Prediction and Climate Application) is an official software of the COSMO Consortium.  It is used to prepare the external parameter data files that are used as input for the COSMO and the ICON model.</p> <p>The code is written in Fortran 90 and in Python. The Python scripts use CDO for the most compute-intensive parts. The code is also accelerated in some places with OpenMP parallelization.</p> <p>The code once compiled generates 6 Fortran executables and 9 Python scripts, which can be run simultaneously except for the final extpar_consistency_check.exe, which is used to tie together all the external parameter results into one output file.</p> <p>Information about the latest changes can be found in the Release Notes.</p> <p>A full documentation of the code can be found as an assets of each release.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#container","title":"Container","text":"<p>The easiest way to use extpar is through the container provided with Dockerfile.  A ready-to-use image can be downloaded from C2SM docker hub  or even simpler via CLI <code>docker pull c2sm/extpar:tagname</code>.</p> <p>Alternatively an image is provided as an asset of each release</p>"},{"location":"#wrapextpar","title":"WrapExtpar","text":"<p>The image provides a wrapper that only requires to set basic options, all other details are handled by the wrapper.</p> <p>The wrapper needs two different kinds of input:</p> <p>1. Extpar settings as JSON, see official docs</p> <p><pre><code>{\n  \"extpar\": {\n    \"igrid_type\": 1,\n    \"iaot_type\": 1,\n    \"ilu_type\": 1,\n    \"ialb_type\": 1,\n    \"isoil_type\": 1,\n    \"itopo_type\": 1,\n    \"lsgls\": false,\n    \"lfilter_oro\": false,\n    \"lurban\": false\n  }\n}\n  ```\n\n_2. Execution options_\n```console\n  --input-grid INPUT_GRID\n                        COSMO: Fortran Namelist \"INPUT_COSMO_GRID\", ICON: Icon\n                        grid file\n  --raw-data-path RAW_DATA_PATH\n                        Path to folder \"linked_data\" of exptar-input-data\n                        repository\n  --run-dir RUN_DIR     Folder for running Extpar\n  --account ACCOUNT     Account for slurm job\n  --host HOST           Host\n  --no-batch-job        Run jobscript not as batch job\n  ```\n\nAn example call could look like\n```bash\ndocker run -v /c2sm-data/extpar-input-data:/data \\\n           -v /icon-grids:/grid \\\n           -v /my_local_dir:/work \\\n           extpar \\ \n           python3 -m extpar.WrapExtpar \\\n           --run-dir /work \\\n           --raw-data-path /data/linked_data \\\n           --account none \\\n           --no-batch-job \\\n           --host docker \\\n           --input-grid /grid/icon_grid.nc \\\n           --extpar-config /work/config.json\n</code></pre> Below is a more detailed explanation about the mounted volumes:</p> <ul> <li><code>-v /c2sm-data/extpar-input-data:/data</code>: Mounts the input data at <code>/data</code> inside the container. This should be aligned with the <code>--raw-data-path</code> argument.</li> <li><code>-v /icon-grids:/grid</code>: Mounts a local folder with icon grids under <code>/grid</code> inside the container. This should be aligned with the <code>--input-grid</code> argument.</li> <li><code>-v /my_local_dir:/work</code>: Mounts a local folder for extpar output at <code>/work</code> inside the container. This should be aligned with the <code>--run-dir</code> argument.</li> </ul>"},{"location":"#individual-executables","title":"Individual executables","text":"<p>For those who require a more custom setup of Extpar or need settings that are not possible to specify through the wrapper, you can run each executable within the image too. For example:</p> <pre><code>docker run extpar bash -c \"extpar_topo_to_buffer\"\n\n## Bare metal build on Levante\n\nThe installation steps are\n\n```bash\ngit clone --recursive git@github.com:C2SM-RCM/extpar.git\ncd extpar\ngit submodule update\n./configure.levante.gcc\nsource modules.env\nmake -j 4\n</code></pre> <p>Furthermore copy all the .exe and .py files from bin to the directory  in which the namelist and all required input-data is present.</p> <p>You do then have two choices to run extpar:</p> <ol> <li>configure the <code>PYTHONPATH</code> variable such that it includes to the <code>python/lib</code>    folder of the source repository</li> <li>build and install a python package for your user account</li> </ol>"},{"location":"#installing-extpar","title":"Installing extpar","text":"<p>After you prepared extpar (see above), you have to options to install and run the software.</p>"},{"location":"#option-1-pythonpath","title":"Option 1: PYTHONPATH","text":"<p>If you like to run the extpar scripts without installing a package, make sure to have the <code>python/lib</code> folder in your <code>PYTHONPATH</code> variable. You can do this via</p> <pre><code>export PYTHONPATH=$PYTHONPATH:$(pwd)/python/lib\n</code></pre> <p>Afterwards you can <code>cd</code> into the <code>bin/</code> directory and run the corresponding executables, e.g.</p> <pre><code>cd bin\n./extpar_aot_to_buffer.exe\n</code></pre> <p>For more detailed compilation instructions see: compile_run</p>"},{"location":"#option-2-build-and-install-a-python-package","title":"Option 2: Build and install a python package","text":"<p>Alternatively you can build a python package and install it to your libraries. This has the advantages that the executables can be ran from anywhere in the system without the need to copy the executables themselves.</p> <p>To build the package, now run</p> <pre><code>python setup.py sdist\n</code></pre> <p>You can then install it via</p> <pre><code>pip install dist/extpar-*.tar.gz\n</code></pre> <p>Note: If you do not have the permissions to install it into the system-wide python library, it will be installed for your user account only (you can also add the <code>--user</code> flag to <code>pip</code> to force this behaviour).</p> <p>If you did not install <code>extpar</code> into the system-libraries, make sure that the <code>bin</code> folder of your local user is on your <code>PATH</code> variable to be able to run the extpar scripts. This is usually done via</p> <pre><code>export PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre> <p>You can then call the functionalities of <code>WrapExtpar.py</code> via</p> <pre><code>python -m extpar.WrapExtpar\n</code></pre> <p>or import the script in python via</p> <pre><code>from extpar.WrapExtpar import generate_external_parameters\n</code></pre> <p>Or you call the executable scripts in your run directory, e.g.</p> <pre><code>extpar_aot_to_buffer.exe\n</code></pre>"},{"location":"#input-data","title":"Input Data","text":""},{"location":"#data-location","title":"Data Location","text":"<p>In order to run Extpar, input data files for the external parameter variables are needed. The data is provided on all supported machines: *  Levante: /work/pd1167/extpar-input-data/linked_data *  CO2 (ETHZ): /c2sm-data/extpar-input-data</p> <p>The input data files are also stored in a git-LFS data repository found at: https://gitlab.dkrz.de/extpar-data/extpar-input-data. Instructions to download or update the input data files can be found in this repository. To gain access to the git-LFS input data repository, contact the Extpar source code administrator.</p>"},{"location":"#testing","title":"Testing","text":"<p>The extpar code comes with a technical testsuite to ensure the accuracy of the results. Weekly tests run for compilers * GCC</p> <p>For more information about how the testsuite can be run or new test added see testsuite-documentation</p>"},{"location":"#information-for-developers","title":"Information for developers","text":"<p>In case you want to contribute to Extpar please have a look at our coding rules and development workflow.</p>"},{"location":"#support","title":"Support","text":"<p>In the case of issues or questions, please contact the current source code administrator (Jonas Jucker) at jonas.jucker@c2sm.ethz.ch.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Compile and Run</li> <li>Dependencies</li> <li>Testing</li> <li>Development</li> <li>Release Notes</li> </ul>"},{"location":"compile_run/","title":"Compile and Run","text":""},{"location":"compile_run/#compilation","title":"Compilation","text":"<p>Since Version 5.4, Extpar is built with an autotool based build-system. This has been necessary to accomodate for the additional C source code files and newly required libraries.</p> <p>There are three options to compile Extpar: </p>"},{"location":"compile_run/#in-source-build","title":"In-source build","text":"<p>./configure.hostname.compiler source modules.env make   </p>"},{"location":"compile_run/#out-of-source-build","title":"Out-of-source build","text":"<p>mkdir build-my_self_defined_note cd build-my_self_defined_note path_to_the_extpar_installation/configure.hostname.compiler source modules.env make  </p>"},{"location":"compile_run/#install-binaries-only-in-external-directory","title":"Install binaries only in external directory","text":"<p>./configure.hostname.compiler --prefix=my_external_directory source modules.env make install The binaries will be installed in  my_external_directory/bin</p>"},{"location":"compile_run/#restart-build-from-scratch","title":"Restart build from scratch","text":"<p>make distclean </p>"},{"location":"compile_run/#configure-for-new-machines","title":"Configure for new machines","text":"<p>The first step in creating a new machine setup is to take one of the existing configure wrapper scripts and adapt it to your local environment. The scripts are called configure.hostname.compiler.</p>"},{"location":"compile_run/#running","title":"Running","text":"<p>The Fortran executables  *   extpar_aot_to_buffer.exe *   extpar_landuse_to_buffer.exe *   exptar_soil_to_buffer.exe *   extpar_topo_to_buffer.exe *   extpar_flake_to_buffer.exe  *   extpar_consistency_check.exe </p> <p>can simply be copied to the run-directory.</p> <p>The main python scripts  *   extpar_alb_to_buffer.py *   extpar_cru_to_buffer.py *   extpar_ndvi_to_buffer.py *   extpar_emiss_to_buffer.py *   exptar_era_to_buffer.py *   extpar_ahf_to_buffer.py *   extpar_isa_to_buffer.py </p> <p>can be treated like the Fortran binaries and copied to the run-directory. Make sure the namelist.py is also present at the run-directory.  </p> <p>All self-written Python-modules are stored in lib and do not need to be copied to the respective run-directory, rather the environment variable PYTHONPATH needs to be set to the following:  </p> <p>export PYTHONPATH=$PYTHONPATH:absolute_path_to_python/lib</p> <p>Some runscript examples are available under /run_scripts. Just adapt them to your needs!</p>"},{"location":"compile_run/#check","title":"Check","text":"<ol> <li>that you haven't got any error message at runtime,</li> <li>that you got a file in NetCDF format (.nc), and</li> <li>in case of use with cosmo that Int2lm is able to read these 2 files </li> </ol>"},{"location":"dependencies/","title":"Dependencies","text":""},{"location":"dependencies/#dependencies","title":"Dependencies","text":"<p>EXTPAR contains FORTAN-Code as well as hybrid Python-CDO scripts. Both code bases need external libraries and installations.</p>"},{"location":"dependencies/#libraries","title":"Libraries","text":""},{"location":"dependencies/#fortran","title":"Fortran","text":"<p>EXTPAR needs the following libraries for the Fortran-Code: - NetCDF - JASPER - PNG - Z LIB</p>"},{"location":"dependencies/#python-cdo","title":"Python-CDO","text":"<p>EXTPAR needs the following Python-packages and installations: - at least Python 3.6 - module netCDF4</p> <p>The module netCDF is the Python interface to the netCDF C library. It allows the user create and manipulate netCDF files with Python. For more detailed information please visit netCDF Python.</p> <p>Additionally an installation of CDO (Climate Data Operator) is required. All necessary information about this tool can be found at CDO-MPI.</p> <p>Be sure that these libraries are installed on your system or install them yourself by following the installation instructions provided with the libraries.</p>"},{"location":"dependencies/#on-the-cscs-machines","title":"On the CSCS machines","text":"<p>All the required libraries are already installed on the CSCS machines.  </p>"},{"location":"dependencies/#on-the-dkrz-machine-levante","title":"On the DKRZ machine Levante","text":"<p>All the required libraries are already installed on the DKRZ machine.</p>"},{"location":"development/","title":"Information for EXTPAR developers","text":""},{"location":"development/#git-and-github","title":"Git and Github","text":"<p>The Extpar code is developed using the git version control system and the Github web interface.  Outstanding bugs and requested features are tracked using the Issues section of the Github repository.  Additionally, automated testing of newly developed features is integrated into the Github interface using the Jenkins CI tool.  </p>"},{"location":"development/#main-branches","title":"Main branches","text":"<p>The master branch only contains code which are released versions.  All commits on the master branch are tagged (git tag -a vX.Y.Z). Only the core development team is allowed to modify the master branch.</p>"},{"location":"development/#supporting-branches","title":"Supporting branches","text":"<p>Any new code development should be done in a topic branch. Topic branches are merged back into master by opening a pull request. Code must be peer reviewed by the source code administrator.</p> <p>Supporting branches are removed once successfully merged in one of the master branch.</p>"},{"location":"development/#developments-with-new-input-data-sets","title":"Developments with new input data sets","text":"<p>Any new Extpar code that is accompanied by a new input data file or files should be added with a simultaneous pull request in both this code repository (for the code changes) and in the extpar-input-data repository (for the addition of the input data files). The topic branch for both pull requests should have the same name, in order to enable the synchronization of the code and input-data repositories.</p>"},{"location":"development/#testing-new-developments","title":"Testing new developments","text":"<p>Once a developer has finished developing a new feature or bug fix, they should make a  pull request on the Github repository from their topic branch into the rc-branch branch. Then, they should write the following comment into the pull request conversation: \"launch jenkins\" This will start the automated testing, and the code will be compiled and tested on Tsa, Piz Daint and Levante.</p> <p>If the tests fail, then the developer should fix the issues and resubmit the testing on Jenkins. Once all of the tests are passing, then they should notify the source code administrator that the pull request is ready for review and merging into the rc-branch branch.  </p>"},{"location":"development/#fortran-code","title":"Fortran Code","text":""},{"location":"development/#logging","title":"Logging","text":"<p>In case you want to add some additional prints in Extpar, please use the logger described below.</p> <p>CALL the built-in logger-functions in order to print messages or variables in the specific logfile of each Extpar executable. The logger has three different levels of messages to print:</p> <ol> <li> <p>logging%info(your_message): info-prints for better orientation during code execution, variables or other stuff.</p> </li> <li> <p>logging%warning(your_message): warnings, like wrong namelist-inputs, unsupported NetCDF versions or problems with some data points.</p> </li> <li> <p>logging%error(your_message, FILE,LINE): errors that occur during I/O, allocation, that requires an abort of Extpar. </p> </li> </ol> <p>As your_message needs to be a sequence of characters, use WRITE(message_text,*)var_x, 'is now', var_y and then CALL logging%inf0(message_text) to print the values of var_x and var_y to the logfile.</p> <p>For quick debugging-prints ONLY use WRITE(logging%fileunit,*)var_x, 'is now', var_y </p>"},{"location":"development/#coding-rules-and-best-practices","title":"Coding rules and best practices","text":"<ol> <li> <p>All features available in Fortran 2008 as far as supported by Intel, GCC, and NAG are allowed.</p> </li> <li> <p>Use up to the allowed 132 character per line, but not more. Note that this includes comments.</p> </li> <li> <p>Indentation rules</p> </li> </ol> Code feature Num. of indentation characters program indentation 2 type definition 2 do loops 2 if constructs 2 continuation 5 (with leading &amp;) all directives 0 <ol> <li> <p>Always use IMPLICIT NONE and PRIVATE/PUBLIC once only in modules header.</p> </li> <li> <p>Do not add add USE statements after CONTAINS.</p> </li> <li> <p>Fortran keywords should be in capital letters with the exception of len, in, out, and inout.</p> </li> <li> <p>Do not use tabs, deprecated, or obsolete features.</p> </li> <li> <p>Do not overspecify declarations - especially if standard types are expected.</p> </li> </ol>"},{"location":"development/#python-code","title":"Python Code","text":""},{"location":"development/#logging_1","title":"Logging","text":"<p>In case you want to add some additional prints in Extpar, please use the logger described below.</p> <p>CALL the built-in logger-functions in order to print messages or variables in the specific logfile of each Extpar executable. The logger can print variables as well as strings. Use formatted strings (f') in case you want to combine variables and strings. The logger has 4 different levels of messages to print:</p> <ol> <li> <p>loggin.debug(your_message): Mean/Max/Min of variables needed for development, more detailed information about code execution.</p> </li> <li> <p>logging.info(your_message): info-prints for better orientation during code execution, variables or other stuff.</p> </li> <li> <p>logging.warning(your_message): warnings, like wrong namelist-inputs, unsupported NetCDF versions or problems with some data points.</p> </li> <li> <p>logging.error(your_message): errors that occur during I/O, allocation or wrong namelist parameters, that requires an abort of Extpar. The programm does not stop automatically after the call of logging.error, so a <code>raise</code> follows the logging.error()</p> </li> </ol> <p>Default logging level is info, so only messages from logging.info(), logging.warning() and logging.error() are written to the logfile. Adjust the level of the logger right at the beginning of each Python executable to level=logging.DEBUG to also print logging.debug().</p>"},{"location":"development/#coding-rules-and-best-practices_1","title":"Coding rules and best practices","text":"<p>The Python code needs to fulfill the Pep8 coding standard. A GitHub action automatically formats Python-code for you.</p>"},{"location":"release_notes/","title":"Release notes","text":"<p>For the latest release notes, please see our GitHub webpage.</p>"},{"location":"release_notes/#514","title":"5.14","text":"<ul> <li>New buffer script <code>extpar_cdnc_to_buffer</code> for ICON</li> <li>Cloud droplet number concentration from the cloud optical depth and effective radius</li> <li>Input data:<ul> <li>modis_cdnc_climatology_Q06.nc</li> </ul> </li> </ul>"},{"location":"release_notes/#513","title":"5.13","text":"<ul> <li>New buffer script <code>extpar_edgar_to_buffer</code> for ICON</li> <li>Global emission data for black carbon, organic carbon and sulfur dioxide</li> <li>Input data:<ul> <li>EDGARv6.1_BC_2018_TOTALS.0.1x0.1.nc</li> <li>EDGARv6.1_OC_2018_TOTALS.0.1x0.1.nc</li> <li>EDGARv6.1_SO2_2018_TOTALS.0.1x0.1.nc</li> </ul> </li> <li>Fix albodo for glacier points</li> <li>Changes the following fields for ICON setups<ul> <li>ALB</li> <li>ALNID</li> <li>ALUVD</li> <li>FOR_D</li> <li>FOR_E</li> <li>LAI_MX</li> <li>PLCOV_MX</li> <li>ROOTDP</li> <li>SOILTYP</li> <li>ROOTDP</li> <li>URBAN</li> </ul> </li> </ul>"},{"location":"release_notes/#512","title":"5.12","text":"<ul> <li>New landuse data set Ecoclimap Second Generation</li> <li>Namelist switch <code>i_landuse_data=6</code> in <code>INPUT_LU</code> </li> <li>Set <code>l_terra_urb=.true.</code> in <code>INPUT_LU</code> to process additional urban fields</li> <li>Corresponding input-data set is <code>ECOCLIMAP_SG.nc</code></li> <li>Assign more landuse classes (previously \"undefined\") for Corine</li> <li>Changes the following fields<ul> <li>SOILTYP</li> <li>FR_LAND</li> <li>PLCOV_MX</li> <li>LAI_MX</li> <li>RSMIN</li> <li>URBAN</li> <li>FOR_D</li> <li>FOR_E</li> <li>SKC</li> <li>EMIS_RAD</li> <li>ROOTDP</li> <li>Z0</li> <li>NDVI_MAX</li> <li>FR_LAKE</li> <li>DEPTH_LK</li> <li>AHF</li> <li>ISA</li> <li>NDVI</li> <li>ALNID</li> <li>ALUVD</li> <li>NDVI_MRAT</li> <li>LU_CLASS_FRACTION</li> <li>ALB</li> </ul> </li> <li>New buffer script <code>extpar_hwsdART_to_buffer</code></li> <li>Standalone executable, output not processed by consistency_check</li> <li>Namelist <code>INPUT_hwsdART</code> defines key parameters</li> <li>Input data: HWSD0_USDA.nc</li> <li>Problems with git-lfs prohibit the data to be provided on Levante</li> </ul>"},{"location":"release_notes/#511","title":"5.11","text":"<ul> <li>Remove ecoclimap (ilanduse=4) from extpar_landuse_to_buffer</li> <li>Introduction of GitHub actions</li> <li>Format code each time a .py-file is pushed to repo</li> <li>Test if docs (.tex-file) is still buildable each time it is changed</li> <li>Attach docs (.pdf) as artifact to each git tag</li> <li>Remove misleading code for extpar_topo_to_buffer</li> <li>Orographic smoothing for Icon aborts Extpar</li> <li>Remove dead code parts in mo_agg_topo_icon</li> <li>Installation of Extpar as Python package</li> <li>Possibility to install all relevant executables and Python scripts as package</li> <li>Adapt import statements in all Python files to work as a package as well</li> <li>Detailed instructions how to install in README</li> <li>Wrapper script for Extpar</li> <li>Only key switches like itope_type or ialb_type need to be specified</li> <li>Automatic generation of namelists</li> <li>Picks the correct topographic input data tiles into INPUT_ORO</li> <li>Runs a batched job for Daint or Levante</li> <li>Wrapper needs same Python environment (PYTHONPATH) as Extpar</li> <li>run <code>WrapExtpar.py -h</code> for more infos</li> <li>Testsuite</li> <li>Add new test for WrapExtpar.py on Daint and Levante</li> <li>Python</li> <li>Use <code>raise</code> instead of <code>sys.exit(1)</code> to abort scripts</li> </ul>"},{"location":"release_notes/#5101","title":"5.10.1","text":"<p>This is a minor release to fix cdo version on Levante * CDO-version fixed to 2.0.5 because later versions exit with non-zero exit status for <code>cdo -V</code></p>"},{"location":"release_notes/#510","title":"5.10","text":"<p>This is a minor release with fixes for Levante at DKRZ, a cleanup of MCH runscripts and a bugfix for in consistency_check * CDO version change from 1.9.10 to 2.0.5 on Levante at DKRZ    - Fields from Python-CDO scripts changed up to 10e-4!    - Many (even large) adjustements of the tolerances in the testsuite    - Result on other machines remain unchanged * Fix for array out-of-bounds with special points outside of target domain * Abort Extpar in consistency check if compiler not GCC * Cleanup and update runscripts for models run at MeteoSwiss</p>"},{"location":"release_notes/#591","title":"5.9.1","text":"<p>This is a minor release to support Levante at DKRZ and drop the support for Intel * Support GCC on Levante * Remove configure-wrappers for Mistral * Remove Intel references in testsuite</p>"},{"location":"release_notes/#59","title":"5.9","text":"<p>This is an intermediate release with OpenMP optimizations, a bugfix for topography and and some cleanup * OpenMP optimizations for domains crossing date-line in the following parts    - extpar_landuse_to_buffer    - extpar_topo_to_buffer * Update runscripts    - ETH domain with Merit topography    - EU-Cordex domain with Globe topography * Cleanup    - Remove all leftovers from old build-system    - Remove output for vertices       - Around 10% speedup</p> <ul> <li>Bugfix: Take last row at dateline into account</li> <li>Last raw data row in mo_agg_topo was ignored</li> <li>Changes the following fields (only in testcase mpim/icon_r2b4)<ul> <li>SSO_GAMMA</li> <li>SSO_OROMAX</li> <li>SSO_OROMIN</li> <li>SSO_SIGMA</li> <li>SSO_STDH</li> <li>SSO_THETA</li> <li>T_CL</li> <li>Z0</li> </ul> </li> </ul>"},{"location":"release_notes/#58","title":"5.8","text":"<p>This is an intermediate release with changes for the upgrade of Piz Daint, support for Merit topography for COSMO and a revised algorithm for SGSL processing * Daint upgrade    - export PMI_NO_PREINITIALIZE=1 to avoid unwanted prints from CDO    - New paths for Python virtual environment:       - Daint: /project/g110/extpar/venv_daint       - Tsa: /project/g110/extpar/venv_tsa * Merit for COSMO    - Enable itopo_type=3 for COSMO grid    - Testing performed by Christian Steger from Hymet-group at ETH-IAC * Revised algorithm for SGSL preprocessing    - Infer values of boundary points for SGSL    - Deactivate SGSL for ASTER due to inconsistencies. For detailed information see the PR.</p>"},{"location":"release_notes/#574","title":"5.7.4","text":"<p>This is a minor release with an adaption in the SSO-computation and replacement of ksh with bash * Revised SSO for ICON    - Experiments at DWD showed an improvement of model results with different SSO-thresholds, see this wiki entry for more information.    - Lowering of threshold from 10.0 to 1.0 changes the following fields       - SSO_GAMMA       - SSO_OROMAX       - SSO_OROMIN       - SSO_SIGMA       - SSO_STDH       - SSO_THETA       - topography_c (only in testcase mpim/icon_r2b4)</p> <ul> <li>Replace ksh with bash in runscripts to prepare for future linux-distributions</li> </ul>"},{"location":"release_notes/#573","title":"5.7.3","text":"<p>This is a minor release with two technical improvements. * Python-CDO    - Automatic detection if CDO contains thread-safe HDF5 library * extpar_topo_to_buffer    - Reduce memory usage for option lsubstract_mean_slope=.TRUE.</p>"},{"location":"release_notes/#572","title":"5.7.2","text":"<p>This is a minor release with an update for the Python environment on Mistral and refactored docs. * Python on Mistral   - Replace anaconda3/bleeding_edge with python3/unstable * Docs   - Remove outdated documentation   - Make docs about testsuite and compilation more comprehensive   - Quickstart for all supported machines</p>"},{"location":"release_notes/#571","title":"5.7.1","text":"<p>This is a minor release with two bugfixes, one for the build-system and one for extpar_topo_to_buffer. * Build-system:   - Install Python-CDO script in bin-folder directly in Makefile   - Out-of-source build include Python-CDO scripts as well  * extpar_topo_to_buffer:    - Abort Extpar for itopo_type = 3</p>"},{"location":"release_notes/#57","title":"5.7","text":"<p>This is an intermediate release that introduces two Python-CDO scripts, modifications for reduced memory usage for non-global grids and a bugfix for the CAMS-aersosol dataset. * extpar_isa_to_buffer    - Replace Fortran code with Python-CDO    - Change in results for fields         - Impervous Surface Area (ISA)    - Read the users guide for detailed information about details of the implementation of extpar_isa_to_buffer * exptar_ahf_to_buffer    - Replace Fortran code with Python-CDO    - Change in results for fields       - Antropogenic Heat Flux (AHF)    - Read the users guide for detailed information about details of the implementation of extpar_ahf_to_buffer * Reduce memory usage for Python-CDO    - Automatic determination of the extent of the target grid    - Use CDO operator -sellonlat to read subset of input data * Bugfix for CAMS dataset    - Remove assertion for GCC-compiler    - Fix wrong dimensions in meta-data for the ICON-grid</p>"},{"location":"release_notes/#56","title":"5.6","text":"<p>This is an intermediate release that introduces a new topography dataset and the CAMS-aerosol climatologies,  OpenMP support for CSCS-machines, enhanced testing on CSCS-machines, a script to extract the input-data from namelist,  progress bars for logfiles of extpar_topo_to_buffer and consistent names for all logfiles.</p> <ul> <li>Merit/Rema topography</li> <li>Set switch itopo_type = 3 to process Merit-Rema data</li> <li>CAMS aerosol climatology for ICON</li> <li>Set switch iaot_type = 5 to process CAMS-aerosol data</li> <li>Due to an unresolved bug only available for Intel compiler</li> <li>Testsuite</li> <li>Remove COSMO-D2 test from testsuite</li> <li>Enable landuse tests for all supported machines</li> <li>All tests run on 12 OpenMP threads on Piz Daint and Tsa for COSMO and ICON</li> <li>Introduce the script extract_inputfiles_from_namelist.py for faster data access at CSCS. It is recommended to use this skript for your own Extpar runs as well.</li> <li>Logging</li> <li>Progress bar (0% to 100%) for topography processing</li> <li>Change logfile-name for extpar_consistency_check to extpar_consistency_check.log</li> </ul>"},{"location":"release_notes/#551","title":"5.5.1","text":"<p>This is a minor release that fixes the inconsistent usage of netCDF versions across Extpar and small documentation changes.</p> <ul> <li>Bugfix netCDF versions</li> <li>Use netCDF version passed via NETCDF_OUTPUT_FILETYPE also for ICON grids (CDI-interface)</li> <li>Documentation changes</li> <li>Put Jonas Jucker as source code administrator</li> </ul>"},{"location":"release_notes/#55","title":"5.5","text":"<p>This is an intermediate release that brings enhanced namelist parsing for the Python-CDO scripts, a new Python-CDO script extpar_era_to_buffer.py to replace the former way of remapping ERA-climatologies using Icontools, a more sophisticated tolerance checker to allow specific roundoff for each test and variables, support NetCDF5 and new default NetCDF 4, fixes for high-resolution grid exceeding integer value range and some minor bugfixes for Piz Daint related to HDF5. * exptar_era_to_buffer    - 4 fields processed       - Sea surface temperature (T_SEA)       - 2m land temperature (T_2M_CLIM)       - Geometric height (TOPO_CLIM)       - Snow water equivalent (W_SNOW)    - New namelist-parameter iera_type defines type of ERA input data used, either ERA-I or ERA-5    - extpar_consistency_check checks for namelist INPUT_ERA to determine if ERA-climatologies come from Python-CDO or Icontools    - Using extpar_era_to_buffer.py changes fields, a detailed review of changes was performed by J\u00fcrgen Helmert from DWD       - W_SNOW       - TOPO_CLIM       - T_SEA       - T_2M_CLIM    - Read the users guide for detailed information about how extpar_era_to_buffer is integrated into the existing workflow * Enhanced namelist parsing for Python-CDO    - Line starting with ! ignored as expected from Fortran code * Bugfixes for Piz Daint    - -L option for all CDO commands    - Disbable HDF5 file locking due to problems reading some input data * Improved tolerance testing in testsuite    - Tolerances can now be defined separate for each test and variable for example in tolerance file * Support for NetCDF 5   - NetCDF 4 replaces netCDF 3 as default   - Value of environment variable NETCDF_OUTPUT_FILETYPE sets version: NETCDF3, NETCDF4 or NETCDF5 * Modified netCDF-interface functions to allow write of fields with dimesions exceeding default integer value range </p>"},{"location":"release_notes/#541","title":"5.4.1","text":"<p>This is an intermediate release that brings two lradtopo-parameters for Icon, better user feedback for the shell-commands launched in the Python-scripts, a bugfix in exptar_albedo_to_buffer.py, a configure script for O3 (ETHZ) and small technical improvements to the Code. * HORIZON and SKYVIEW fields for the Icon grid    - 4 new namelist-parameter       - radius -&gt; defines the considered horizontal distance for the HORIZON field       - min_circ_cov -&gt; defines the level of detail of the search-algorithm for performance reasons       - max_missing -&gt; defines upper treshold for the allowed missingness at the boundary of the domain       - itype_scaling -&gt; choose the type of scaling for SKYVIEW to account for anisotropic behaviour of IR-radiation     - Read the users guide for detailed information about the difference between the COSMO and the ICON implementation</p> <ul> <li>Refactor function launch_shell by using subprocess.PIPE, providing output even when command crashes</li> <li>Correct bug for ialb_type=1 or 2 during netcdf write</li> <li>Configure script for O3 at ETHZ, not regularly tested with Jenkins</li> <li>Change link to CDI-submodule, to allow access for people witout DKRZ account</li> <li>Split chained CDO-operators into two steps to prevent crashes on Piz  Daint</li> </ul>"},{"location":"release_notes/#54","title":"5.4","text":"<p>This is a major release that introduces a rewrite of 4 Extpar programmes in Python, a common git-LFS input data repository, a new build-system, 2 additional landuse data sets, CDI-library for icon grids in consistency check, mmap-caching for consistency check for less memory usage, some small improvements in the Fortran code and some minor changes in the testsuite.</p> <ul> <li>Rewrite of 4 Extpar programmes in Python</li> <li>Modules extpar_alb_to_buffer.py, extpar_cru_to_buffer.py, extpar_emiss_to_buffer.py and extpar_ndvi_to_buffer.py</li> <li>Small changes of the fields compared to the former Fortran implementation due to different interpolation methods, especially at the coastlines</li> <li>Fields changed:<ul> <li>NDVI, NDVI_MAX, NDVI_MRAT</li> <li>ALB_SAT, ALB_DRY</li> <li>ALB, ALUVD, ALNID</li> <li>T_CL</li> <li>EMISS_RAD</li> </ul> </li> <li>A review involving users from DWD, MCH, MPIM and ETH took place to ensure the correctness of all fields changed</li> <li>All Python programmes read from the same namelist file namelist.py containing Python dictionaries for each Extpar program.</li> <li> <p>Support of the old and coarse data (it_cl_type = 2) in extpar_cru_to_buffer expires and is replaced the following:</p> <ul> <li>it_cl_type = 2 aggregates the coarse data over sea and the fine data over land</li> <li>it_cl_type = 1 aggregates the fine data over land, sea points are not considered</li> <li>For aggregation of the coarse data over land and sea only, use Extpar 5.3 or older</li> </ul> </li> <li> <p>Read the users guide for detailed information about the rewritten programmes.</p> </li> <li> <p>git-LFS input data repository</p> </li> <li>All input data that can be processed with Extpar is stored in a unified data repository extpar-input-data</li> <li>Move all useful scripts and informations from raw_data_tools to the data repository hosted at DKRZ.</li> <li>Remove folder raw_data_tools from Extpar repository</li> <li>Some fields are renamed for better understanding, so please check your runscripts to adapt the new names.</li> <li>Location on CSCS: /store/c2sm/extpar_raw_data/linked_data</li> <li>Location on Mistral: /work/pd1167/extpar-input-data/linked_data</li> <li>New build-system  </li> <li>New system follows the configure/make/make install paradigm</li> <li>Out-of-source build supported</li> <li> <p>4 basic steps to compile Extpar into binaries:</p> <ul> <li>Run configure.your_machine.your_compiler</li> <li>source modules.env</li> <li>make or make -j 4 (for faster compilation)</li> <li>Kesch at CSCS is no longer supported</li> </ul> </li> <li> <p>Corine landuse data</p> </li> <li>Additional landuse data set covering Europe</li> <li>Can only be used in combination with GLOBCOVER (i_landuse_data=1)</li> <li>Set switch l_use_corine=.true. in namelist lu_raw_data to aggregate the new data set</li> <li> <p>The corine landuse data set is only tested on Mistral at DKRZ</p> </li> <li> <p>ECCI landuse data</p> </li> <li>Global landuse data set split in 6 tiles</li> <li>Set switch i_landuse_data=5, ntiles_globcover=6 and ilookup_table_lu = 1 in namelist lu_raw_data to aggregate the new data set</li> <li> <p>The ECCI landuse data is only tested on Mistral at DKRZ</p> </li> <li> <p>Enhanced testsuite</p> </li> <li>Icon test for DWD for all compilers</li> <li>Jenkins on Mistral, Tsa and Daint</li> <li>Convert testsuite src-code from Python2 to Python3</li> <li>Pep8-Coding style test for Python code</li> <li>Allow round-off for certain fields in output</li> <li> <p>Copy all required files from namelistdir (icon grids, clim-fields and Python-files) through testsuite itself</p> </li> <li> <p>CDI library for icon grids</p> </li> <li>CDI write routine replaces write_netcdf_icon_grid routine</li> <li>Output of icon grids always involves CDI, output without CDI no longer supported</li> <li>CDI contained as a git submodule inside the Extpar repository</li> <li> <p>See compile_run for instructions to clone Extpar from GitHub correctly</p> </li> <li> <p>Mmap-caching</p> </li> <li>allows run of Extpar on machines with only little memory</li> <li>new logical parameter l_use_array_cache = .true. * in namelist file *INPUT_CHECK activates mmap-caching</li> <li>Bitwise-identical with and without mmap-caching</li> <li> <p>Only supported and tested for GCC compiler</p> </li> <li> <p>Fortran Code changes</p> </li> <li>Remove all filename_max from INTENT(IN)</li> <li>Output of COSMO/ICON netCDF-files in the buffer modules no longer supported</li> <li>Remove all unused modules/programmes replaced by Python modules</li> <li>Remaining code still needed in Fortan now contained in modules mo_python_data.f90, mo_python_routines.f90, and mo_python_tg_fields.f90</li> </ul> <p>## 5.3  This is an intermediate release that reduces code complexity for topo_to_buffer.exe, enhances the testing for INTEL compiler and further cleans the code</p> <ul> <li>Merge sgsl_to_buffer into topo_to_buffer</li> <li>New namelist &amp;oro_runcontrol in INPUT_ORO containing lcompute_sgsl</li> <li>For users of former sgsl_to_buffer.exe, namelist &amp;sgsl_io_extpar now moved to INPUT_ORO, containing the new parameter lpreproc_oro</li> <li> <p>The functionality is kept by default for all newly introduced namelist parameters, so for the same workflows as before only change lcompute_sgsl</p> </li> <li> <p>Testsuite</p> </li> <li>Additional check for compiler warning of GCC,INTEL and NAG</li> <li>Unify runscripts for COSMO and ICON</li> <li>Slightly different domain for COSMO1, reducing the required number of ASTER tiles to only 1</li> <li> <p>Add references for INTEL in a seperate directory in data</p> </li> <li> <p>Cleanup</p> </li> <li>Initialize logicals in extpar_consistency_check properly to prevent bugs</li> <li>Remove hardcoded filename in emiss_to_buffer</li> <li>Finalize logging and coding standard as described in developers guide</li> </ul> <p>## 5.2.1  This is a minor release containing a bug fix and a small feature addition.  * Bug fix for ICON/COSMO file- and variable name mismatch in topography calculation  * Add Extpar version number (pulled from git release number) to output NetCDF file</p> <p>## 5.2  This is an intermediate release introducing extpar_emiss_to_buffer, an improved logging, enhanced error checking during I/O and a lot of clean-up and formatting</p> <ul> <li>New Extpar executable emiss_to_buffer</li> <li>Aggregates CAMEL emissivity data to the target grid</li> <li> <p>Two raw datasets available (full range and only long-wave radiation)</p> </li> <li> <p>Consistent logger for all Extpar executables</p> </li> <li>Three levels of messages: info, warning and error</li> <li> <p>Each Extpar executable write to its own logfile</p> </li> <li> <p>Clean-up and formatting of all src-files</p> </li> <li>Remove all unused variables and USE-statements</li> <li>Remove all unused dummy arguments in subroutines</li> <li> <p>Implement formatting according the coding-guidelines for Extpar</p> </li> <li> <p>Make all precisions consistent</p> </li> <li>Remove i8 from Extpar, instead make all INTEGER(KIND=i4)</li> <li> <p>Change all REAL to REAL(KIND=wp), wp is defined in mo_kind</p> </li> <li> <p>Small changes in some fields due to fix of implicit type conversion during runtime</p> </li> <li>Z0, max difference ~10^(-7)</li> <li> <p>DEPTH_LK, max difference ~10^(-6)</p> </li> <li> <p>Enhanced error checking during I/O</p> </li> <li>All namelist I/O checked, abort of Extpar in case of incorrect (typos, wrong variables, etc,) namelists</li> </ul> <p>## 5.1.2  This is a minor release containing a few bug fixes.  * Fix build environment on Kesch  * Add missing definition of skinc_lu meta data when ECOCLIMAP dataset is chosen. </p> <p>## 5.1.1  This is a minor release containing a few bug fixes.  * Fix read of l_use_glcc landuse calculation for COSMO runs.  * Fix unitialized logical flag to trigger scale separation in topography calculation.  * Reactivate all cosmo tests from testsuite on Kesch.</p> <p>## 5.1  This is an intermediate release containing some bug fixes and some minor developments.  </p> <ul> <li>Changes to Jenkins and the automated testing:  </li> <li>Fix Mistral setup so that code runs on compute nodes instead of login nodes</li> <li>Fix Mistral setup so that intel compiler can be tested.  Note that only run success      is checked for the intel compiler; the results are not yet tested.  </li> <li> <p>Fix NAG compiler setup so that only compilation, not testing is done, because      testing is too time consuming.  </p> </li> <li> <p>Bug fix for iaot_type = 4 (MACv2 aerosols).  The code had not been correctly imported from version 4.0.</p> </li> <li> <p>Contributions from DWD including:</p> </li> <li>DWD versions of the python and shell replacement scripts for ndvi, albedo, and cru</li> <li>DWD bug fix for the albedo calculation</li> <li> <p>DWD bug fix for incorrect glacier points</p> </li> <li> <p>New output variable skin conductivity (SKC) developed by Jan-Peter Schulz.  Skin conductivity is calculated from the landuse data.  </p> </li> </ul> <p>## 5.0.4  This is a minor release containing a few bug fixes.</p> <ul> <li> <p>Bug fix for problems when soil_type=3 is used.  The code had not been correctly imported from version 4.0  </p> </li> <li> <p>Bug fix adding missing NetCDF get_varid call when more than one GLOBCOVER tile is used.  </p> </li> </ul> <p>## 5.0.3  This is a minor release containing a bug fix.  </p> <ul> <li>Bug fix for incorrect global attributes in output NetCDF file.  </li> </ul> <p>## 5.0.2  This is a minor release containing a bug fix.</p> <ul> <li>Bug fix for incorrect subroutine argument usage in mo_agg_isa.f90.  </li> </ul> <p>## 5.0.1  This is a minor release fixing a few bugs and some documentation.</p> <ul> <li>Bug fix to remove too many characters in write statement (mo_logging.f90)</li> <li>Bug fix for unitialized variable ntiles_globcover (mo_landuse_routines.f90, extpar_consistency_check.f90, and extpar_landuse_to_buffer.f90)</li> <li>Remove unnecessary libraries in Options.daint</li> <li>Fix typos in README.compile_run</li> </ul> <p>## 5.0  This release represents a merge of the Extpar official version 4.0 code with the DWD-Extpar version 2.10. </p> <p>#### Build Mechanism</p> <ul> <li>Added Options file for compiling on LCE with Intel compiler</li> <li>Added Options files for compiling on Mistral with GCC, NAG, and Intel compilers</li> <li>Added Options files for compiling on Mac OS with the GCC compiler</li> <li>Updated Options file for compiling on o3 at ETH with PGI compiler</li> <li>Update bin/gen_info.sh for compatibility with git</li> </ul> <p>#### Run scripts</p> <ul> <li>Minor adaptations to run scripts to be compatible with new version</li> <li>Addition of MPI ICON run script</li> </ul> <p>#### Testing</p> <ul> <li>Addition of cosmo-dwd and icon tests to testsuite.</li> <li>Update of Jenkins build and test scripts.</li> <li>Add testsuite run scripts for mpi and dwd on mistral.</li> <li>Update of testsuite references.</li> </ul> <p>### Code changes</p> <p>#### Albedo calculation:  * Added bin/cdo2alb-buffer.py and extpar_alb_to_buffer.sh to replace slow and incorrect albedo calculation for high resolution ICON model grids</p> <p>#### Topography calculation:  * Added namelist parameter: lsubtract mean_slope  * Move mo_agg_topo to mo_agg_topo_icon and mo_agg_topo_cosmo  * Bug fix in mo_topo_sso- changes results of sso_sigma slightly</p> <p>#### Soil calculation:  * Additional HWSD calculation for deep soil</p> <p>#### NDVI calculation:  * Added bin/cdo2ndvi-buffer.py and extpar_ndvi_to_buffer.sh to replace slow and incorrect NDVI calculation for high resolution ICON model grids</p> <p>#### Climatological 2M temperature calculation:  * Added bin/cdo2t_cl-buffer.py and extpar_cru_to_buffer.sh to replace slow and incorrect TCLIM calculation for high resolution ICON model grids  * Added namelist parameter: ltcl_merge</p> <p>#### Flake calculation:  * Added namelist parameter: lflake_correction.</p> <p>#### Consistency check:  * [Changes results] Included lower limit for roughness length  * ERA-I SST and T2M temperature for ICON model</p> <p>#### Grib output NOT supported</p> <p>#### GME model NOT supported</p> <p>### Changes in Results   Due to the large amount of changes in the code in this release, there are many differences in the resulting external parameter fields generated by the release 5.0 code compared to the fields generated by older Extpar codes.  The only code change in this release that deliberately changed the results was the addition of a lower limit for roughness length, which is 1e-6.  Otherwise, any changes in results that can be seen came directly from bug fixes to the code, and as such most of them are small and are not expected to change results in the COSMO or ICON model runs.  Some of these changes in results are examined in the next two sections.  </p> <p>#### Extpar version 4.0 to Extpar version 5.0   The technical testsuite in Extpar was used to compare the external parameter fields from Version 4.0 and Version 5.0 for three different MeteoSwiss operational setups for COSMO and a climate setup for COSMO-CLM.  </p> <p>##### COSMO 7, globe topography input   For the COSMO7 MCH setup using the globe topography data set, changes in the results smaller than 1e-6 can be seen for several variables, including the aerosol variables, albedo variables, HORIZON, and SSO_SIGMA.  Larger changes on the order of 3 degrees can be seen in the SSO_THETA variable;  these are due to a bug fix in this release, and are expected.  Finally, roughness length is different as well due to the introduction of the lower limit value of 1e-6.  </p> <p>##### COSMO 7, aster topography input   For the COSMO7 MCH setup using  the aster topography data set, the changes in the results are less than 5e-7, and occur in the aerosol, HORIZON, and SSO_SIGMA variables.  </p> <p>##### COSMO 1, aster topography input   For the COSMO1 MCH setup using the aster topography data set, the changes in the results are less than 4e-5, and occur in the aerosol, HORIZON, SKYVIEW, and T_CL variables.  </p> <p>##### COSMO-CM climate setup   For the COSMO-CLM climate setup using the globe topography data set, changes in results smaller than 3e-8 can be seen in the SSO_SIGMA and SSO_STDH variables.  Larger changes on the order of 3 degrees can be seen in the SSO_THETA variable;  these are due to a bug fix in this release, and are expected.  Due to another bug fix, the ALB_SAT and ALB_DRY variables have changed results on the order of .2.  Finally, roughness length is different as well due to the introduction of the lower limit value of 1e-6.  </p> <p>#### DWD Extpar version 2.10 to Extpar version 5.0   Comparisons of the COSMO D2 setup used operationally by DWD were carried out to compare the current operational Extpar code (DWD version 2.10) with the new release 5.0.  This comparison showed no significant differences in the generated external parameter fields.  Get more details of this comparison here</p>"},{"location":"testing/","title":"Testing","text":"<p>Extpar is tested with an adapted version of the COSMO technical testsuite.</p>"},{"location":"testing/#run-tests","title":"Run Tests","text":"<p>First step is to compile the code following the instructions in compile_run.</p>"},{"location":"testing/#docker","title":"Docker","text":"<p><code>docker run extpar bash -c \"/workspace/test/jenkins/test_docker.sh\"</code></p>"},{"location":"testing/#levante","title":"Levante","text":"<pre><code>cp bin/* test/testsuite/bin/.\ncd test/testsuite\n./data/get_data.sh\nsbatch submit.levante.sh\n</code></pre> <p>The results of the testsuite can be found in file testsuite.out</p> <p>An example output could look as follows: </p>"},{"location":"testing/#testlists","title":"Testlists","text":"<p>There are many different testlist, each containing a set of tests for different setups, compiler or models:</p>"},{"location":"testing/#gcc","title":"GCC","text":"<ul> <li>COSMO</li> <li>ICON</li> <li>Landuse</li> </ul> <p>## Tolerances  It is possible to define an optional tolerance threshold for each test and each field.  To allow deviations for the test icon_d2 for example, just dit the the tolerances-file.  The syntax is as follows:  <pre><code>PARAMETER, abs_diff\nNDVI, 9.0e-08\nW_SNOW, 5.0e-05\n</code></pre></p> <p>## Add a new test</p> <ol> <li> <p>Modify the testlist.xml file to add the new test.  Alternatively, you could also add a new       testlist XML file (with a new name).  The testlist which is run can be chosen from the testsuite      command line.  </p> </li> <li> <p>Make a folder in the data folder for the new test containing the INPUT_* files and the namelist.py for the Python-CDO modules.  </p> </li> <li> <p>Send any binary reference files to upload to the ftp site to the source code administrator. </p> </li> </ol>"}]}